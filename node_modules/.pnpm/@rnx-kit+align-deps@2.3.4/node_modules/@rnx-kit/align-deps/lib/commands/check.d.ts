import type { Command, ErrorCode, Options } from "../types";
/**
 * Checks the specified package manifest for misaligned dependencies.
 *
 * There are essentially two modes of operation depending on whether the package
 * is an app or a library.
 *
 * - For libraries, only dependencies that are declared under capabilities are
 *   checked. `align-deps` will ensure that `peerDependencies` and
 *   `devDependencies` are correctly used to satisfy the declared capabilities.
 * - For apps, its dependencies and the dependencies of its dependencies are
 *   checked. `align-deps` will ensure that `dependencies` and `devDependencies`
 *   are correctly used to satisfy the declared capabilities. Additionally,
 *   requirements may only resolve to a single profile. If multiple profiles
 *   satisfy the requirements, the command will fail.
 *
 * Note that this function mutates the manifest when `write` is `true`.
 *
 * @see {@link updatePackageManifest}
 *
 * @param manifestPath Path to the package manifest to check
 * @param options Command line options
 * @param inputConfig Configuration in the package manifest
 * @param logError Function for outputting changes
 * @returns `success` when everything is in order; an {@link ErrorCode} otherwise
 */
export declare function checkPackageManifest(manifestPath: string, options: Options, inputConfig?: import("../types").AlignDepsConfig | ErrorCode | import("../types").LegacyCheckConfig, logError?: {
    (...data: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
}): ErrorCode;
/**
 * Creates the check command. This is the default command no other flags are
 * specified.
 *
 * In normal mode, `align-deps` will only check packages that have a
 * configuration, and only listed capabilities.
 *
 * In vigilant mode, `align-deps` will check all packages in the workspace,
 * regardless of whether they have a configuration. For packages that do have a
 * configuration, the listed capabilities will be checked first as usual. The
 * remaining capabilities will then be checked, but are treated as unconfigured.
 *
 * @see {@link checkPackageManifest}
 * @see {@link checkPackageManifestUnconfigured}
 *
 * @param options Command line options
 * @returns The check command
 */
export declare function makeCheckCommand(options: Options): Command;
//# sourceMappingURL=check.d.ts.map