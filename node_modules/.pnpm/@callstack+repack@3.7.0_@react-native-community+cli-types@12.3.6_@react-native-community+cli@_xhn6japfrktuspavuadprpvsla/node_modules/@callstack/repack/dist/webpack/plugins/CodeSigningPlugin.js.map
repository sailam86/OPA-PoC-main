{"version":3,"file":"CodeSigningPlugin.js","names":["CodeSigningPlugin","constructor","config","privateKeyPath","apply","compiler","enabled","pluginName","name","TOKEN_BUFFER_SIZE","BEGIN_CS_MARK","path","join","context","privateKey","fs","readFileSync","chunkFiles","Set","hooks","thisCompilation","tap","compilation","afterProcessAssets","chunks","forEach","chunk","files","file","outputOptions","filename","excludeChunks","includes","String","id","add","afterEmit","tapPromise","Promise","all","Array","from","map","bundle","readFile","hash","crypto","createHash","update","digest","token","jwt","sign","algorithm","signedBundle","Buffer","concat","length","ensureDir","outputPath","writeFile"],"sources":["../../../src/webpack/plugins/CodeSigningPlugin.ts"],"sourcesContent":["import crypto from 'crypto';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport jwt from 'jsonwebtoken';\nimport webpack from 'webpack';\nimport type { WebpackPlugin } from '../../types';\n\n/**\n * {@link CodeSigningPlugin} configuration options.\n */\nexport interface CodeSigningPluginConfig {\n  /** Whether the plugin is enabled. Defaults to true */\n  enabled?: boolean;\n  /** Output path to a directory, where signed bundles should be saved. */\n  outputPath: string;\n  /** Path to the private key. */\n  privateKeyPath: string;\n  /** Names of chunks to exclude from being signed. */\n  excludeChunks?: string[];\n}\n\nexport class CodeSigningPlugin implements WebpackPlugin {\n  /**\n   * Constructs new `RepackPlugin`.\n   *\n   * @param config Plugin configuration options.\n   */\n  constructor(private config: CodeSigningPluginConfig) {\n    this.config.privateKeyPath = this.config.privateKeyPath ?? './private.pem';\n  }\n\n  /**\n   * Apply the plugin.\n   *\n   * @param compiler Webpack compiler instance.\n   */\n  apply(compiler: webpack.Compiler) {\n    /**\n     * For now this flag defaults to true to avoid a breaking change.\n     *\n     * TODO: In next major revision, we should consider removing the default here\n     * and align this option with other plugins.\n     */\n    if (this.config.enabled === false) {\n      return;\n    }\n\n    const pluginName = CodeSigningPlugin.name;\n    // reserve 1280 bytes for the token even if it's smaller\n    // to leave some space for future additions to the JWT without breaking compatibility\n    const TOKEN_BUFFER_SIZE = 1280;\n    // used to denote beginning of the code-signing section of the bundle\n    // alias for \"Repack Code-Signing Signature Begin\"\n    const BEGIN_CS_MARK = '/* RCSSB */';\n    const privateKeyPath = path.join(\n      compiler.context,\n      this.config.privateKeyPath\n    );\n    const privateKey = fs.readFileSync(privateKeyPath);\n    const chunkFiles = new Set<string>();\n    // Tapping to the \"thisCompilation\" hook in order to further tap\n    // to the compilation process on an later stage.\n    compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {\n      // we need to make sure that assets are fully processed in order\n      // to create a code-signing mapping.\n      compilation.hooks.afterProcessAssets.tap(pluginName, () => {\n        // adjust for chunk name to filename\n        compilation.chunks.forEach((chunk) => {\n          chunk.files.forEach((file) => {\n            // Exclude main output bundle because it's always local\n            if (file === compilation.outputOptions.filename) {\n              return;\n            }\n            // Exclude chunks specified in config\n            if (this.config.excludeChunks?.includes(String(chunk.id))) {\n              return;\n            }\n            chunkFiles.add(file);\n          });\n        });\n      });\n\n      compiler.hooks.afterEmit.tapPromise(pluginName, async (compilation) => {\n        await Promise.all(\n          Array.from(chunkFiles).map(async (chunk) => {\n            const bundle = await fs.readFile(\n              path.join(compilation.outputOptions.path!, chunk)\n            );\n\n            // generate bundle hash\n            const hash = crypto\n              .createHash('sha256')\n              .update(bundle)\n              .digest('hex');\n\n            // generate token\n            const token = jwt.sign({ hash }, privateKey, {\n              algorithm: 'RS256',\n            });\n\n            // combine the bundle and the token\n            const signedBundle = Buffer.concat(\n              [bundle, Buffer.from(BEGIN_CS_MARK), Buffer.from(token)],\n              bundle.length + TOKEN_BUFFER_SIZE\n            );\n\n            await fs.ensureDir(this.config.outputPath);\n            await fs.writeFile(\n              path.join(compiler.context, this.config.outputPath, chunk),\n              signedBundle\n            );\n          })\n        );\n      });\n    });\n  }\n}\n"],"mappings":"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"}