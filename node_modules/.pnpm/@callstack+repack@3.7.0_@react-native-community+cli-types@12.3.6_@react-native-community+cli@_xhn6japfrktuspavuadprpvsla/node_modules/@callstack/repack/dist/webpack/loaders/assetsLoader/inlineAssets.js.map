{"version":3,"file":"inlineAssets.js","names":["inlineAssets","assets","resourcePath","resourceFilename","suffixPattern","mimeType","mimeTypes","lookup","undefined","size","getImageSize","Error","sourceSet","reduce","sources","asset","scale","encodeAsset","scales","JSON","stringify","Object","keys","map","Number","dedent","encodedContent","content","Buffer","toString","from","uri","width","height"],"sources":["../../../../src/webpack/loaders/assetsLoader/inlineAssets.ts"],"sourcesContent":["import dedent from 'dedent';\nimport mimeTypes from 'mime-types';\nimport type { Asset, ImageSize, URISource } from './types';\nimport { getImageSize } from './utils';\n\nexport function inlineAssets({\n  assets,\n  resourcePath,\n  resourceFilename,\n  suffixPattern,\n}: {\n  assets: Asset[];\n  resourcePath: string;\n  resourceFilename: string;\n  suffixPattern: string;\n}) {\n  const mimeType = mimeTypes.lookup(resourcePath) || undefined;\n  const size = getImageSize({ resourcePath, resourceFilename, suffixPattern });\n\n  if (!mimeType) {\n    throw new Error(\n      `Cannot inline asset for request ${resourcePath} - unable to detect MIME type`\n    );\n  }\n\n  // keys are always converted to strings\n  const sourceSet = assets.reduce((sources, asset) => {\n    sources[asset.scale] = encodeAsset(asset, mimeType, size);\n    return sources;\n  }, {} as Record<string, URISource>);\n\n  const scales = JSON.stringify(Object.keys(sourceSet).map(Number));\n\n  /**\n   * To enable scale resolution in runtime we need to import PixelRatio & AssetSourceResolver\n   * Although we could use AssetSourceResolver as it is, we need to import PixelRatio to remain\n   * compatible with older versions of React-Native. Newer versions of React-Native use\n   * ESM for PixelRatio, so we need to check if PixelRatio is an ESM module and if so, adjust the import.\n   */\n  return dedent`\n    var PixelRatio = require('react-native/Libraries/Utilities/PixelRatio');\n    var AssetSourceResolver = require('react-native/Libraries/Image/AssetSourceResolver');\n\n    if (PixelRatio.__esModule) PixelRatio = PixelRatio.default;\n    var prefferedScale = AssetSourceResolver.pickScale(${scales}, PixelRatio.get());\n\n    module.exports = ${JSON.stringify(sourceSet)}[prefferedScale];\n  `;\n}\n\nfunction encodeAsset(\n  asset: Asset,\n  mimeType: string,\n  size?: ImageSize\n): URISource {\n  const encodedContent =\n    asset.content instanceof Buffer\n      ? asset.content.toString('base64')\n      : Buffer.from(asset.content ?? '').toString('base64');\n\n  return {\n    uri: `data:${mimeType};base64,${encodedContent}`,\n    width: size?.width,\n    height: size?.height,\n    scale: asset.scale,\n  };\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;AAEO,SAASA,YAAT,CAAsB;EAC3BC,MAD2B;EAE3BC,YAF2B;EAG3BC,gBAH2B;EAI3BC;AAJ2B,CAAtB,EAUJ;EACD,MAAMC,QAAQ,GAAGC,kBAAA,CAAUC,MAAV,CAAiBL,YAAjB,KAAkCM,SAAnD;EACA,MAAMC,IAAI,GAAG,IAAAC,mBAAA,EAAa;IAAER,YAAF;IAAgBC,gBAAhB;IAAkCC;EAAlC,CAAb,CAAb;;EAEA,IAAI,CAACC,QAAL,EAAe;IACb,MAAM,IAAIM,KAAJ,CACH,mCAAkCT,YAAa,+BAD5C,CAAN;EAGD,CARA,CAUD;;;EACA,MAAMU,SAAS,GAAGX,MAAM,CAACY,MAAP,CAAc,CAACC,OAAD,EAAUC,KAAV,KAAoB;IAClDD,OAAO,CAACC,KAAK,CAACC,KAAP,CAAP,GAAuBC,WAAW,CAACF,KAAD,EAAQV,QAAR,EAAkBI,IAAlB,CAAlC;IACA,OAAOK,OAAP;EACD,CAHiB,EAGf,EAHe,CAAlB;EAKA,MAAMI,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeC,MAAM,CAACC,IAAP,CAAYV,SAAZ,EAAuBW,GAAvB,CAA2BC,MAA3B,CAAf,CAAf;EAEA;AACF;AACA;AACA;AACA;AACA;;EACE,OAAO,IAAAC,eAAA,CAAO;AAChB;AACA;AACA;AACA;AACA,yDAAyDP,MAAO;AAChE;AACA,uBAAuBC,IAAI,CAACC,SAAL,CAAeR,SAAf,CAA0B;AACjD,GARE;AASD;;AAED,SAASK,WAAT,CACEF,KADF,EAEEV,QAFF,EAGEI,IAHF,EAIa;EACX,MAAMiB,cAAc,GAClBX,KAAK,CAACY,OAAN,YAAyBC,MAAzB,GACIb,KAAK,CAACY,OAAN,CAAcE,QAAd,CAAuB,QAAvB,CADJ,GAEID,MAAM,CAACE,IAAP,CAAYf,KAAK,CAACY,OAAN,IAAiB,EAA7B,EAAiCE,QAAjC,CAA0C,QAA1C,CAHN;EAKA,OAAO;IACLE,GAAG,EAAG,QAAO1B,QAAS,WAAUqB,cAAe,EAD1C;IAELM,KAAK,EAAEvB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEuB,KAFR;IAGLC,MAAM,EAAExB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEwB,MAHT;IAILjB,KAAK,EAAED,KAAK,CAACC;EAJR,CAAP;AAMD"}