{"version":3,"file":"loader-utils.d.js","names":[],"sources":["../src/loader-utils.d.ts"],"sourcesContent":["declare module 'loader-utils' {\n  // Type definitions for loader-utils 2.0\n  // Project: https://github.com/webpack/loader-utils#readme\n  // Definitions by: Gyusun Yeom <https://github.com/Perlmint>\n  //                 Totooria Hyperion <https://github.com/TotooriaHyperion>\n  //                 Piotr Błażejewicz <https://github.com/peterblazejewicz>\n  //                 Jesse Katsumata <https://github.com/Naturalclar>\n  // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\n  /// <reference types=\"node\" />\n\n  import webpack from 'webpack';\n\n  export type LoaderCallback = (\n    error: Error | undefined | null,\n    content?: string | Buffer,\n    sourceMap?: string | webpack.sources.SourceMapSource\n  ) => void;\n\n  export interface LoaderContext {\n    rootContext: string;\n    resourcePath: string;\n    fs: webpack.Compiler['inputFileSystem'];\n    cacheable(flag?: boolean): void;\n    async(): LoaderCallback | undefined;\n    addDependency(file: string): void;\n    emitFile(name: string, content: Buffer | string, sourceMap?: any): void;\n    getLogger(\n      name: string\n    ): ReturnType<webpack.Compiler['getInfrastructureLogger']>;\n  }\n\n  export type Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n  };\n\n  export interface InterpolateOption {\n    context?: string;\n    content?: string | Buffer;\n    regExp?: string | RegExp;\n  }\n\n  export interface OptionObject {\n    [key: string]: null | false | true | string;\n  }\n\n  export type HashType = 'sha1' | 'md4' | 'md5' | 'sha256' | 'sha512';\n\n  export type DigestType =\n    | 'hex'\n    | 'base26'\n    | 'base32'\n    | 'base36'\n    | 'base49'\n    | 'base52'\n    | 'base58'\n    | 'base62'\n    | 'base64';\n\n  /**\n   * Recommended way to retrieve the options of a loader invocation\n   * {@link https://github.com/webpack/loader-utils#getoptions}\n   */\n  export function getOptions(\n    loaderContext: LoaderContext\n  ): Readonly<OptionObject>;\n\n  /**\n   * Parses a passed string (e.g. loaderContext.resourceQuery) as a query string, and returns an object.\n   * {@link https://github.com/webpack/loader-utils#parsequery}\n   */\n  export function parseQuery(optionString: string): OptionObject;\n\n  /**\n   * Turns a request into a string that can be used inside require() or import while avoiding absolute paths. Use it instead of JSON.stringify(...) if you're generating code inside a loader.\n   * {@link https://github.com/webpack/loader-utils#stringifyrequest}\n   */\n  export function stringifyRequest(\n    loaderContext: LoaderContext,\n    resource: string\n  ): string;\n\n  export function getRemainingRequest(loaderContext: LoaderContext): string;\n\n  export function getCurrentRequest(loaderContext: LoaderContext): string;\n\n  export function isUrlRequest(url: string, root?: string): boolean;\n\n  export function parseString(str: string): string;\n\n  /**\n   * Converts some resource URL to a webpack module request.\n   * {@link https://github.com/webpack/loader-utils#urltorequest}\n   */\n  export function urlToRequest(url: string, root?: string): string;\n\n  /**\n   * Interpolates a filename template using multiple placeholders and/or a regular expression.\n   * The template and regular expression are set as query params called name and regExp on the current loader's context.\n   * {@link https://github.com/webpack/loader-utils#interpolatename}\n   */\n  export function interpolateName(\n    loaderContext: LoaderContext,\n    name: string,\n    options?: any\n  ): string;\n\n  /**\n   * @param buffer\n   * @param [hashType='md4']\n   * @param [digestType='hex']\n   * @param [maxLength=9999]\n   */\n  export function getHashDigest(\n    buffer: Buffer,\n    hashType: HashType,\n    digestType: DigestType,\n    maxLength: number\n  ): string;\n}\n"],"mappings":""}