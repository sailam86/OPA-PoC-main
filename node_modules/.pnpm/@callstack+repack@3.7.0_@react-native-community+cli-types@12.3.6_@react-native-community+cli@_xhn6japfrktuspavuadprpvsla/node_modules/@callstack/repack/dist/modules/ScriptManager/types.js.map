{"version":3,"file":"types.js","names":[],"sources":["../../../src/modules/ScriptManager/types.ts"],"sourcesContent":["/* globals Headers, FormData */\n\nexport interface WebpackContext {\n  p: () => string;\n  u: (id: string) => string;\n}\n\n/**\n * Interface specifying how to fetch a script.\n * It represents the output of {@link ScriptLocatorResolver} function used by {@link ScriptManager}.\n */\nexport interface ScriptLocator {\n  /**\n   * A path-only URL to remote location, where to download a script from.\n   *\n   * Changing this field for the same script, will cause cache invalidation for that script\n   * and a fresh version will be downloaded.\n   *\n   * Example: for `scriptId: 'TeacherModule'` the `url` can look like this:\n   * `https://myapp.com/assets/TeacherModule`.\n   *\n   * **Passing query params might lead to unexpected results. To pass query params use `query` field.**\n   */\n  url: string | ((webpackContext: WebpackContext) => string);\n\n  /**\n   * Query params to append when building the final URL.\n   *\n   * Changing this field for the same script, will cause cache invalidation for that script\n   * and a fresh version will be downloaded.\n   */\n  query?: string | Record<string, string> | URLSearchParams;\n\n  /**\n   * Headers to pass to a script's fetch request.\n   *\n   * When passing `body`, make sure add content `content-type` header, otherwise `text/plain`\n   * will be used.\n   *\n   * Changing this field for the same script, will cause cache invalidation for that script\n   * and a fresh version will be downloaded.\n   */\n  headers?: Record<string, string> | Headers;\n\n  /**\n   * HTTP method used to fetch script.\n   *\n   * Passing `body` with method `GET` is a no-op. Use `POST` to send `body` data.\n   *\n   * Changing this field for the same script, will cause cache invalidation for that script\n   * and a fresh version will be downloaded.\n   */\n  method?: 'GET' | 'POST';\n\n  /**\n   * HTTP body for a script's fetch request.\n   *\n   * When passing `body`, make sure the `method` is set to `POST` and a correct\n   * `content-type` header is provided.\n   *\n   * Changing this field for the same script, will cause cache invalidation for that script\n   * and a fresh version will be downloaded.\n   */\n  body?: FormData | URLSearchParams | string | null;\n\n  /**\n   * Custom timeout for script fetch requests. Defaults to 30s.\n   * On iOS this `timeout` is used as a `timeoutInterval`\n   * On Android this `timeout` is used as a `readTimeout` and `connectionTimeout`.\n   */\n  timeout?: number;\n\n  /**\n   * Flag indicating whether the URL is an absolute FileSystem URL on a target device.\n   * Useful if you're using custom code to download the script and you want `ScriptManager` to\n   * execute it only from a custom FileSystem path.\n   * Defaults to `false`.\n   */\n  absolute?: boolean;\n\n  /**\n   * Flag to disable script caching. By default set to `true`.\n   *\n   * When `true` (default), it will compare method, url, query, headers and body of\n   * previous (if there was) attempt to load the same script. If none of them changed, it\n   * will NOT download a new copy of the script, but instead, it will only execute previously\n   * downloaded script.\n   * Setting this flat to `false`, disables that behavior.\n   */\n  cache?: boolean;\n\n  /**\n   * Flag to enable script's code-signature verification. By default set to `none`\n   *\n   * `strict` means that the script's code-signature will be verfied regardless of the signature being present in the bundle\n   * `lax` means that the script's code-signature will be verfied only when the signature is present in the bundle\n   *  if the signature is not present in the bundle, the script will be loaded without verification\n   * `off` means that the script's code-signature will not be verfied\n   */\n  verifyScriptSignature?: 'strict' | 'lax' | 'off';\n  /**\n   * Function called before loading or getting from the cache and after resolving the script locator.\n   * It's an async function which should return a boolean indicating whether the script should be loaded or use default behaviour.\n   * This is useful when you want to load a script only when certain conditions are met\n   * (e.g. ask user if they want to update/download new version of the script)\n   *\n   * When `true` is returned, the script will be loaded from the network.\n   * When `false` is returned, the script will be loaded from the cache.\n   *\n   * @param scriptId Id of the script to resolve.\n   * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.\n   * @param isScriptCacheOutdated Boolean indicating whether the script cache is outdated or not. It's `true` when the script\n   * cache is outdated and `false` when the script cache is up to date or there is no cache for the script.\n   * Outdated cache means that the script was previously downloaded and put into cache,\n   * but the script locator data (method, url, query, headers, or body) has changed since then.\n   * @returns Boolean indicating whether the script should be loaded or not\n   */\n  shouldUpdateScript?: (\n    scriptId?: string,\n    caller?: string,\n    isScriptCacheOutdated?: boolean\n  ) => Promise<boolean> | boolean;\n}\n\n/**\n * Defines a function to resolve a script locator used in {@link ScriptManagerConfig}.\n * It's an async function which should return an object with data on how {@link ScriptManager}\n * should fetch the script. All fields describing the script locator data are listed in {@link ScriptLocator}.\n *\n * Return `undefined` if the script should be resolved by other resolvers instead.\n *\n * @param scriptId Id of the script to resolve.\n * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.\n */\nexport type ScriptLocatorResolver = (\n  scriptId: string,\n  caller?: string\n) => Promise<ScriptLocator | undefined>;\n\n/**\n * Interface for storage backend used in {@link ScriptManagerConfig}.\n * The interface is modelled on Async Storage from `react-native-community`.\n */\nexport interface StorageApi {\n  /** Gets the data for the key. */\n  getItem: (key: string) => Promise<string | null | undefined>;\n  /** Sets the item value based on the key. */\n  setItem: (key: string, value: string) => Promise<void>;\n  /** Removes the item based on the key. */\n  removeItem: (key: string) => Promise<void>;\n}\n\n/**\n * Internal representation of script locator data.\n *\n * @internal\n */\nexport interface NormalizedScriptLocator {\n  /** HTTP method. */\n  method: 'GET' | 'POST';\n\n  /** Path-only URL to a script's location. */\n  url: string;\n\n  /** Whether to fetch script from the network or use cached one. */\n  fetch: boolean;\n\n  /** Custom timeout for script fetch requests. */\n  timeout: number;\n\n  /** Whether script's URL is an absolute FileSystem URL on a target device. */\n  absolute: boolean;\n\n  /** Query params. */\n  query?: string;\n\n  /** Request headers. */\n  headers?: Record<string, string>;\n\n  /** Request body. */\n  body?: string;\n\n  /** Whether script's signature should be verified or not */\n  verifyScriptSignature?: 'strict' | 'lax' | 'off';\n}\n"],"mappings":""}