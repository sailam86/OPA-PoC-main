{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type {\n  Descriptor,\n  NavigationHelpers,\n  NavigationProp,\n  ParamListBase,\n  RouteProp,\n  TabActionHelpers,\n  TabNavigationState,\n} from '@react-navigation/native';\nimport type { BottomNavigation } from 'react-native-paper';\n\nexport type MaterialBottomTabNavigationEventMap = {\n  /**\n   * Event which fires on tapping on the tab in the tab bar.\n   */\n  tabPress: { data: undefined; canPreventDefault: true };\n};\n\nexport type MaterialBottomTabNavigationHelpers = NavigationHelpers<\n  ParamListBase,\n  MaterialBottomTabNavigationEventMap\n> &\n  TabActionHelpers<ParamListBase>;\n\nexport type MaterialBottomTabNavigationProp<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = NavigationProp<\n  ParamList,\n  RouteName,\n  NavigatorID,\n  TabNavigationState<ParamList>,\n  MaterialBottomTabNavigationOptions,\n  MaterialBottomTabNavigationEventMap\n> &\n  TabActionHelpers<ParamList>;\n\nexport type MaterialBottomTabScreenProps<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = {\n  navigation: MaterialBottomTabNavigationProp<\n    ParamList,\n    RouteName,\n    NavigatorID\n  >;\n  route: RouteProp<ParamList, RouteName>;\n};\n\nexport type MaterialBottomTabNavigationOptions = {\n  /**\n   * Title text for the screen.\n   */\n  title?: string;\n\n  /**\n   * Color of the tab bar when this tab is active. Only used when `shifting` is `true`.\n   */\n  tabBarColor?: string;\n\n  /**\n   * Label text of the tab displayed in the navigation bar. When undefined, scene title is used.\n   */\n  tabBarLabel?: string;\n\n  /**\n   * String referring to an icon in the `MaterialCommunityIcons` set, or a\n   * function that given { focused: boolean, color: string } returns a React.Node to display in the navigation bar.\n   */\n  tabBarIcon?:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n\n  /**\n   * Badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  tabBarBadge?: boolean | number | string;\n\n  /**\n   * Accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   */\n  tabBarAccessibilityLabel?: string;\n\n  /**\n   * ID to locate this tab button in tests.\n   */\n  tabBarTestID?: string;\n};\n\nexport type MaterialBottomTabDescriptor = Descriptor<\n  MaterialBottomTabNavigationOptions,\n  MaterialBottomTabNavigationProp<ParamListBase>,\n  RouteProp<ParamListBase>\n>;\n\nexport type MaterialBottomTabDescriptorMap = Record<\n  string,\n  MaterialBottomTabDescriptor\n>;\n\nexport type MaterialBottomTabNavigationConfig = Partial<\n  Omit<\n    React.ComponentProps<typeof BottomNavigation>,\n    | 'navigationState'\n    | 'onIndexChange'\n    | 'onTabPress'\n    | 'renderScene'\n    | 'renderLabel'\n    | 'renderIcon'\n    | 'getAccessibilityLabel'\n    | 'getBadge'\n    | 'getColor'\n    | 'getLabelText'\n    | 'getTestID'\n  >\n>;\n"],"mappings":""}