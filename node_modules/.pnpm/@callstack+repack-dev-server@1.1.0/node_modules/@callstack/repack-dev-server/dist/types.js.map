{"version":3,"file":"types.js","names":["Api","Server","EventTypes","Internal"],"sources":["../src/types.ts"],"sourcesContent":["import { FastifyLoggerInstance } from 'fastify';\nimport type { CompilerDelegate } from './plugins/compiler';\nimport type { SymbolicatorDelegate } from './plugins/symbolicate';\nimport type { HmrDelegate } from './plugins/wss';\n\nexport type { CompilerDelegate } from './plugins/compiler';\nexport type {\n  SymbolicatorDelegate,\n  ReactNativeStackFrame,\n  InputStackFrame,\n  StackFrame,\n  CodeFrame,\n  SymbolicatorResults,\n} from './plugins/symbolicate';\nexport type { HmrDelegate } from './plugins/wss';\n\nexport namespace Server {\n  /** Development server configuration. */\n  export interface Config {\n    /** Development server options to configure e.g: `port`, `host` etc. */\n    options: Options;\n\n    /** Function to create a delegate, which implements crucial functionalities. */\n    delegate: (context: DelegateContext) => Delegate;\n  }\n\n  /** Development server options. */\n  export interface Options {\n    /** Root directory of the project. */\n    rootDir: string;\n\n    /** Port under which to run the development server. */\n    port: number;\n\n    /**\n     * Hostname or IP address under which to run the development server.\n     * When left unspecified, it will listen on all available network interfaces, similarly to listening on '0.0.0.0'.\n     */\n    host?: string;\n\n    /** Options for running the server as HTTPS. If `undefined`, the server will run as HTTP. */\n    https?: {\n      /** Path to certificate when running server as HTTPS. */\n      cert?: string;\n\n      /** Path to certificate key when running server as HTTPS. */\n      key?: string;\n    };\n  }\n\n  /**\n   * A complete delegate with implementations for all server functionalities.\n   */\n  export interface Delegate {\n    /** A compiler delegate. */\n    compiler: CompilerDelegate;\n\n    /** A symbolicator delegate. */\n    symbolicator: SymbolicatorDelegate;\n\n    /** A logger delegate. */\n    logger: LoggerDelegate;\n\n    /** An HMR delegate. */\n    hmr: HmrDelegate;\n\n    /** An messages delegate. */\n    messages: MessagesDelegate;\n\n    /** An API delegate. */\n    api?: Api.Delegate;\n  }\n\n  /**\n   * A delegate context used in `delegate` builder in {@link Config}.\n   *\n   * Allows to emit logs, notify about compilation events and broadcast events to connected clients.\n   */\n  export interface DelegateContext {\n    /** A logger instance, useful for emitting logs from the delegate. */\n    log: FastifyLoggerInstance;\n\n    /** Send notification about compilation start for given `platform`. */\n    notifyBuildStart: (platform: string) => void;\n\n    /** Send notification about compilation end for given `platform`. */\n    notifyBuildEnd: (platform: string) => void;\n\n    /**\n     * Broadcast arbitrary event to all connected HMR clients for given `platform`.\n     *\n     * @param event Arbitrary event to broadcast.\n     * @param platform Platform of the clients to which broadcast should be sent.\n     * @param clientIds Ids of the client to which broadcast should be sent.\n     * If `undefined` the broadcast will be sent to all connected clients for the given `platform`.\n     */\n    broadcastToHmrClients: <E = any>(\n      event: E,\n      platform: string,\n      clientIds?: string[]\n    ) => void;\n\n    /**\n     * Broadcast arbitrary method-like event to all connected message clients.\n     *\n     * @param event Arbitrary method-like event to broadcast.\n     */\n    broadcastToMessageClients: <\n      E extends { method: string; params?: Record<string, any> }\n    >(\n      event: E\n    ) => void;\n  }\n\n  /**\n   * Delegate with implementation for logging functions.\n   */\n  export interface LoggerDelegate {\n    /**\n     * Callback for when a new log is emitted.\n     *\n     * @param log An object with log data.\n     */\n    onMessage: (log: any) => void;\n  }\n\n  /**\n   * Delegate with implementation for messages used in route handlers.\n   */\n  export interface MessagesDelegate {\n    /** Get message to send as a reply for `GET /` route. */\n    getHello: () => string;\n\n    /** Get message to send as a reply for `GET /status` route. */\n    getStatus: () => string;\n  }\n\n  export namespace Api {\n    /** A compilation asset representation for API clients. */\n    export interface Asset {\n      name: string;\n      size: number;\n      [key: string]: any;\n    }\n\n    /** A compilation stats representation for API clients. */\n    export interface CompilationStats {\n      [key: string]: any;\n    }\n\n    /**\n     * Delegate with implementation for API endpoints.\n     */\n    export interface Delegate {\n      /** Get all platforms - either with already existing compilations or all supported platforms. */\n      getPlatforms: () => Promise<string[]>;\n\n      /**\n       * Get all assets from compilation for given platform.\n       * Should return `[]` if the compilation does not exists for given platform.\n       */\n      getAssets: (platform: string) => Promise<Asset[]>;\n\n      /**\n       * Get compilation stats for a given platform.\n       * Should return `null` if the compilation does not exists for given platform.\n       */\n      getCompilationStats: (\n        platform: string\n      ) => Promise<CompilationStats | null>;\n    }\n  }\n}\n\n/** Representation of the compilation progress. */\nexport interface ProgressData {\n  /** Number of modules built. */\n  completed: number;\n\n  /** Total number of modules detect as part of compilation. */\n  total: number;\n}\n\n/**\n * Type representing a function to send the progress.\n *\n * Used by {@link CompilerDelegate} in `getAsset` function to send the compilation\n * progress to the client who requested the asset.\n */\nexport type SendProgress = (data: ProgressData) => void;\n\n/**\n * Internal types. Do not use.\n *\n * @internal\n */\nexport namespace Internal {\n  export enum EventTypes {\n    BuildStart = 'BuildStart',\n    BuildEnd = 'BuildEnd',\n    HmrEvent = 'HmrEvent',\n  }\n}\n"],"mappings":"AAgBA;AA8JA;;;EA7JE;;EASA;;EAwBA;AACF;AACA;;EAqBE;AACF;AACA;AACA;AACA;;EAqCE;AACF;AACA;;EAUE;AACF;AACA;;;uBASmBA,G,KAAAA,G,WAAAA,G,aAAAA,G;GAzHFC,M,KAAAA,M;;AA+KjB;AACA;AACA;AACA;AACA;AACA;;;MACcC,U;;aAAAA,U;IAAAA,U;IAAAA,U;IAAAA,U;KAAAA,U,KAAAA,U;;;GADGC,Q,KAAAA,Q"}