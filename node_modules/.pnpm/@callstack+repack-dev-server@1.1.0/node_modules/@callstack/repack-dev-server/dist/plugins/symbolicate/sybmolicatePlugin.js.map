{"version":3,"file":"sybmolicatePlugin.js","names":["fastifyPlugin","Symbolicator","symbolicatePlugin","instance","delegate","symbolicator","post","request","reply","stack","JSON","parse","body","platform","inferPlatformFromStack","log","debug","msg","badRequest","results","process","send","error","message","internalServerError","name","dependencies"],"sources":["../../../src/plugins/symbolicate/sybmolicatePlugin.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify';\nimport fastifyPlugin from 'fastify-plugin';\nimport type { Server } from '../../types';\nimport { Symbolicator } from './Symbolicator';\nimport type { ReactNativeStackFrame } from './types';\n\nasync function symbolicatePlugin(\n  instance: FastifyInstance,\n  {\n    delegate,\n  }: {\n    delegate: Server.Delegate;\n  }\n) {\n  const symbolicator = new Symbolicator(delegate.symbolicator);\n\n  instance.post('/symbolicate', async (request, reply) => {\n    // React Native sends stack as JSON but tests content-type to text/plain, so\n    // we cannot use JSON schema to validate the body.\n\n    try {\n      const { stack } = JSON.parse(request.body as string) as {\n        stack: ReactNativeStackFrame[];\n      };\n      const platform = Symbolicator.inferPlatformFromStack(stack);\n      if (!platform) {\n        request.log.debug({ msg: 'Received stack', stack });\n        reply.badRequest('Cannot infer platform from stack trace');\n      } else {\n        request.log.debug({ msg: 'Starting symbolication', platform, stack });\n        const results = await symbolicator.process(request.log, stack);\n        reply.send(results);\n      }\n    } catch (error) {\n      request.log.error({\n        msg: 'Failed to symbolicate',\n        error: (error as Error).message,\n      });\n      reply.internalServerError();\n    }\n  });\n}\n\nexport default fastifyPlugin(symbolicatePlugin, {\n  name: 'symbolicate-plugin',\n  dependencies: ['fastify-sensible'],\n});\n"],"mappings":"AACA,OAAOA,aAAP,MAA0B,gBAA1B;SAESC,Y;;AAGT,eAAeC,iBAAf,CACEC,QADF,EAEE;EACEC;AADF,CAFF,EAOE;EACA,MAAMC,YAAY,GAAG,IAAIJ,YAAJ,CAAiBG,QAAQ,CAACC,YAA1B,CAArB;EAEAF,QAAQ,CAACG,IAAT,CAAc,cAAd,EAA8B,OAAOC,OAAP,EAAgBC,KAAhB,KAA0B;IACtD;IACA;IAEA,IAAI;MACF,MAAM;QAAEC;MAAF,IAAYC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,IAAnB,CAAlB;MAGA,MAAMC,QAAQ,GAAGZ,YAAY,CAACa,sBAAb,CAAoCL,KAApC,CAAjB;;MACA,IAAI,CAACI,QAAL,EAAe;QACbN,OAAO,CAACQ,GAAR,CAAYC,KAAZ,CAAkB;UAAEC,GAAG,EAAE,gBAAP;UAAyBR;QAAzB,CAAlB;QACAD,KAAK,CAACU,UAAN,CAAiB,wCAAjB;MACD,CAHD,MAGO;QACLX,OAAO,CAACQ,GAAR,CAAYC,KAAZ,CAAkB;UAAEC,GAAG,EAAE,wBAAP;UAAiCJ,QAAjC;UAA2CJ;QAA3C,CAAlB;QACA,MAAMU,OAAO,GAAG,MAAMd,YAAY,CAACe,OAAb,CAAqBb,OAAO,CAACQ,GAA7B,EAAkCN,KAAlC,CAAtB;QACAD,KAAK,CAACa,IAAN,CAAWF,OAAX;MACD;IACF,CAbD,CAaE,OAAOG,KAAP,EAAc;MACdf,OAAO,CAACQ,GAAR,CAAYO,KAAZ,CAAkB;QAChBL,GAAG,EAAE,uBADW;QAEhBK,KAAK,EAAGA,KAAD,CAAiBC;MAFR,CAAlB;MAIAf,KAAK,CAACgB,mBAAN;IACD;EACF,CAxBD;AAyBD;;AAED,eAAexB,aAAa,CAACE,iBAAD,EAAoB;EAC9CuB,IAAI,EAAE,oBADwC;EAE9CC,YAAY,EAAE,CAAC,kBAAD;AAFgC,CAApB,CAA5B"}