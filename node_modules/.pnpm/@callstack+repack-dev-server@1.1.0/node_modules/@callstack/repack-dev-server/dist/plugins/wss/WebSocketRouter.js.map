{"version":3,"file":"WebSocketRouter.js","names":["WebSocketRouter","servers","constructor","fastify","server","on","request","socket","head","pathname","URL","url","matched","shouldUpgrade","upgrade","log","debug","msg","destroy","registerServer","push"],"sources":["../../../src/plugins/wss/WebSocketRouter.ts"],"sourcesContent":["import type { IncomingMessage } from 'http';\nimport type { Socket } from 'net';\nimport type { FastifyInstance } from 'fastify';\nimport { WebSocketServer } from './WebSocketServer';\n\n/**\n * Class for creating a WebSocket router to forward connections to the\n * respective {@link WebSocketServer} as long as the connection is accepted for the upgrade by the\n * server.\n *\n * If the connection is not accepted by any `WebSocketServer`, it will be destroyed to avoid\n * creating handling connections and potentially throwing `ECONNRESET` errors.\n *\n * @category Development server\n */\nexport class WebSocketRouter {\n  /** The list of all register WebSocket servers. */\n  protected servers: WebSocketServer[] = [];\n\n  /**\n   * Create new instance of `WebSocketRouter` and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket router to.\n   */\n  constructor(private fastify: FastifyInstance) {\n    this.fastify.server.on(\n      'upgrade',\n      (request: IncomingMessage, socket: Socket, head: Buffer) => {\n        const { pathname } = new URL(request.url || '', 'http://localhost');\n        let matched = false;\n        for (const server of this.servers) {\n          if (server.shouldUpgrade(pathname)) {\n            matched = true;\n            server.upgrade(request, socket, head);\n            break;\n          }\n        }\n\n        if (!matched) {\n          this.fastify.log.debug({\n            msg: 'Destroying socket connection as no server was matched',\n            pathname,\n          });\n          socket.destroy();\n        }\n      }\n    );\n  }\n\n  /**\n   * Register a new {@link WebSocketServer}. New connection will now\n   * check if the given server will accept them and forward them.\n   *\n   * @param server WebSocket server to register.\n   * @returns The same instance of the WebSocket server after it's been registered.\n   */\n  registerServer<T extends WebSocketServer>(server: T): T {\n    this.servers.push(server);\n    return server;\n  }\n}\n"],"mappings":"AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,eAAN,CAAsB;EAC3B;EACUC,OAAO,GAAsB,EAAtB;EAEjB;AACF;AACA;AACA;AACA;AACA;;EACEC,WAAW,CAASC,OAAT,EAAmC;IAAA,KAA1BA,OAA0B,GAA1BA,OAA0B;IAC5C,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,EAApB,CACE,SADF,EAEE,CAACC,OAAD,EAA2BC,MAA3B,EAA2CC,IAA3C,KAA4D;MAC1D,MAAM;QAAEC;MAAF,IAAe,IAAIC,GAAJ,CAAQJ,OAAO,CAACK,GAAR,IAAe,EAAvB,EAA2B,kBAA3B,CAArB;MACA,IAAIC,OAAO,GAAG,KAAd;;MACA,KAAK,MAAMR,MAAX,IAAqB,KAAKH,OAA1B,EAAmC;QACjC,IAAIG,MAAM,CAACS,aAAP,CAAqBJ,QAArB,CAAJ,EAAoC;UAClCG,OAAO,GAAG,IAAV;UACAR,MAAM,CAACU,OAAP,CAAeR,OAAf,EAAwBC,MAAxB,EAAgCC,IAAhC;UACA;QACD;MACF;;MAED,IAAI,CAACI,OAAL,EAAc;QACZ,KAAKT,OAAL,CAAaY,GAAb,CAAiBC,KAAjB,CAAuB;UACrBC,GAAG,EAAE,uDADgB;UAErBR;QAFqB,CAAvB;QAIAF,MAAM,CAACW,OAAP;MACD;IACF,CApBH;EAsBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,cAAc,CAA4Bf,MAA5B,EAA0C;IACtD,KAAKH,OAAL,CAAamB,IAAb,CAAkBhB,MAAlB;IACA,OAAOA,MAAP;EACD;;AA7C0B"}