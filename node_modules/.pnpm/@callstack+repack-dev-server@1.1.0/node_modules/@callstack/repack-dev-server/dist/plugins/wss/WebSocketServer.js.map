{"version":3,"file":"WebSocketServer.js","names":["WebSocketServer","WebSocketServerImpl","constructor","fastify","path","wssOptions","server","noServer","on","onConnection","bind","paths","Array","isArray","shouldUpgrade","pathname","includes","upgrade","request","socket","head","handleUpgrade","webSocket","emit"],"sources":["../../../src/plugins/wss/WebSocketServer.ts"],"sourcesContent":["import type { IncomingMessage } from 'http';\nimport type { Socket } from 'net';\nimport type { FastifyInstance } from 'fastify';\nimport {\n  ServerOptions,\n  WebSocket,\n  WebSocketServer as WebSocketServerImpl,\n} from 'ws';\n\n/**\n * Abstract class for providing common logic (eg routing) for all WebSocket servers.\n *\n * @category Development server\n */\nexport abstract class WebSocketServer {\n  /** An instance of the underlying WebSocket server. */\n  public readonly server: WebSocketServerImpl;\n\n  /** Fastify instance from which {@link server} will receive upgrade connections. */\n  protected fastify: FastifyInstance;\n\n  public readonly paths: string[];\n\n  /**\n   * Create a new instance of the WebSocketServer.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to which the WebSocket will be attached to.\n   * @param path Path on which this WebSocketServer will be accepting connections.\n   * @param wssOptions WebSocket Server options.\n   */\n  constructor(\n    fastify: FastifyInstance,\n    path: string | string[],\n    wssOptions: Omit<\n      ServerOptions,\n      'noServer' | 'server' | 'host' | 'port' | 'path'\n    > = {}\n  ) {\n    this.fastify = fastify;\n    this.server = new WebSocketServerImpl({\n      noServer: true,\n      ...wssOptions,\n    });\n    this.server.on('connection', this.onConnection.bind(this));\n    this.paths = Array.isArray(path) ? path : [path];\n  }\n\n  shouldUpgrade(pathname: string) {\n    return this.paths.includes(pathname);\n  }\n\n  upgrade(request: IncomingMessage, socket: Socket, head: Buffer) {\n    this.server.handleUpgrade(request, socket, head, (webSocket) => {\n      this.server.emit('connection', webSocket, request);\n    });\n  }\n\n  /**\n   * Process incoming WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  abstract onConnection(socket: WebSocket, request: IncomingMessage): void;\n}\n"],"mappings":"AAGA,SAGEA,eAAe,IAAIC,mBAHrB,QAIO,IAJP;AAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAeD,eAAf,CAA+B;EACpC;;EAGA;;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,CACTC,OADS,EAETC,IAFS,EAGTC,UAGC,GAAG,EANK,EAOT;IACA,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKG,MAAL,GAAc,IAAIL,mBAAJ,CAAwB;MACpCM,QAAQ,EAAE,IAD0B;MAEpC,GAAGF;IAFiC,CAAxB,CAAd;IAIA,KAAKC,MAAL,CAAYE,EAAZ,CAAe,YAAf,EAA6B,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAA7B;IACA,KAAKC,KAAL,GAAaC,KAAK,CAACC,OAAN,CAAcT,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA1C;EACD;;EAEDU,aAAa,CAACC,QAAD,EAAmB;IAC9B,OAAO,KAAKJ,KAAL,CAAWK,QAAX,CAAoBD,QAApB,CAAP;EACD;;EAEDE,OAAO,CAACC,OAAD,EAA2BC,MAA3B,EAA2CC,IAA3C,EAAyD;IAC9D,KAAKd,MAAL,CAAYe,aAAZ,CAA0BH,OAA1B,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAkDE,SAAD,IAAe;MAC9D,KAAKhB,MAAL,CAAYiB,IAAZ,CAAiB,YAAjB,EAA+BD,SAA/B,EAA0CJ,OAA1C;IACD,CAFD;EAGD;EAED;AACF;AACA;AACA;AACA;AACA;;;AAjDsC"}