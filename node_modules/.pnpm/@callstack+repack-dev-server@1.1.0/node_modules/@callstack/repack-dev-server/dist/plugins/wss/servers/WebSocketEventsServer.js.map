{"version":3,"file":"WebSocketEventsServer.js","names":["prettyFormat","WebSocketServer","WebSocketEventsServer","PROTOCOL_VERSION","clients","Map","nextClientId","constructor","fastify","config","verifyClient","origin","test","parseMessage","data","message","JSON","parse","version","log","error","msg","undefined","serializeMessage","toSerialize","Error","default","escapeString","highlight","maxDepth","min","type","map","item","plugins","ReactElement","stringify","broadcastEvent","event","size","serialized","clientId","socket","entries","send","_skipBroadcast","onConnection","set","debug","onClose","removeAllListeners","delete","addEventListener","toString","webSocketMessageServer","broadcast","command","params"],"sources":["../../../../src/plugins/wss/servers/WebSocketEventsServer.ts"],"sourcesContent":["import WebSocket from 'ws';\nimport * as prettyFormat from 'pretty-format';\nimport type { FastifyInstance } from 'fastify';\nimport { WebSocketServer } from '../WebSocketServer';\nimport { WebSocketMessageServer } from './WebSocketMessageServer';\n\n/**\n * {@link WebSocketEventsServer} configuration options.\n */\nexport interface WebSocketEventsServerConfig {\n  /** Instance of a {@link WebSocketMessageServer} which can be used for broadcasting. */\n  webSocketMessageServer: WebSocketMessageServer;\n}\n\n/**\n * Represents a command that connected clients can send to the {@link WebSocketEventsServer}.\n */\nexport interface Command {\n  version: number;\n  type: 'command';\n  command: string;\n  params?: any;\n}\n\n/**\n * Represents an event message.\n */\nexport interface EventMessage {\n  error?: Error | string;\n  type?: string;\n  data?: any;\n}\n\n/**\n * Class for creating a WebSocket server to process events and reports.\n *\n * Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/eventsSocketServer.ts\n *\n * @category Development server\n */\nexport class WebSocketEventsServer extends WebSocketServer {\n  static readonly PROTOCOL_VERSION = 2;\n\n  private clients = new Map<string, WebSocket>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketHMRServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   * @param config Configuration object.\n   */\n  constructor(\n    fastify: FastifyInstance,\n    private config: WebSocketEventsServerConfig\n  ) {\n    super(fastify, '/events', {\n      verifyClient: (({ origin }) => {\n        return /^(https?:\\/\\/localhost|file:\\/\\/)/.test(origin);\n      }) as WebSocket.VerifyClientCallbackSync,\n    });\n  }\n\n  /**\n   * Parse received command message from connected client.\n   *\n   * @param data Stringified command message to parse.\n   * @returns Parsed command or `undefined` if parsing failed.\n   */\n  parseMessage(data: string): Command | undefined {\n    try {\n      const message = JSON.parse(data);\n      if (message.version === WebSocketEventsServer.PROTOCOL_VERSION) {\n        return message;\n      }\n      this.fastify.log.error({\n        msg: 'Received message had wrong protocol version',\n        message,\n      });\n    } catch {\n      this.fastify.log.error({\n        msg: 'Failed to parse the message as JSON',\n        data,\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Stringify `message` into a format that can be transported as a `string`.\n   *\n   * @param message Message to serialize.\n   * @returns String representation of a `message` or `undefined` if serialization failed.\n   */\n  serializeMessage(message: EventMessage) {\n    let toSerialize = message;\n    if (message.error && message.error instanceof Error) {\n      toSerialize = {\n        ...message,\n        error: prettyFormat.default(message.error, {\n          escapeString: true,\n          highlight: true,\n          maxDepth: 3,\n          min: true,\n        }),\n      };\n    } else if (message && message.type === 'client_log') {\n      toSerialize = {\n        ...message,\n        data: message.data.map((item: any) =>\n          typeof item === 'string'\n            ? item\n            : prettyFormat.default(item, {\n                escapeString: true,\n                highlight: true,\n                maxDepth: 3,\n                min: true,\n                plugins: [prettyFormat.plugins.ReactElement],\n              })\n        ),\n      };\n    }\n    try {\n      return JSON.stringify(toSerialize);\n    } catch (error) {\n      this.fastify.log.error({ msg: 'Failed to serialize', error });\n      return undefined;\n    }\n  }\n\n  /**\n   * Broadcast event to all connected clients.\n   *\n   * @param event Event message to broadcast.\n   */\n  broadcastEvent(event: EventMessage) {\n    if (!this.clients.size) {\n      return;\n    }\n\n    const serialized = this.serializeMessage(event);\n    if (!serialized) {\n      return;\n    }\n\n    for (const [clientId, socket] of this.clients.entries()) {\n      try {\n        socket.send(serialized);\n      } catch (error) {\n        this.fastify.log.error({\n          msg: 'Failed to send broadcast to client',\n          clientId,\n          error,\n          _skipBroadcast: true,\n        });\n      }\n    }\n  }\n\n  /**\n   * Process new client's WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   */\n  onConnection(socket: WebSocket) {\n    const clientId = `client#${this.nextClientId++}`;\n    this.clients.set(clientId, socket);\n    this.fastify.log.debug({ msg: 'Events client connected', clientId });\n\n    const onClose = () => {\n      this.fastify.log.debug({ msg: 'Events client disconnected', clientId });\n      socket.removeAllListeners();\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('message', (event) => {\n      const message = this.parseMessage(event.data.toString());\n\n      if (!message) {\n        return;\n      }\n\n      if (message.type === 'command') {\n        try {\n          this.config.webSocketMessageServer.broadcast(\n            message.command,\n            message.params\n          );\n        } catch (error) {\n          this.fastify.log.error({\n            msg: 'Failed to forward message to clients',\n            error,\n          });\n        }\n      } else {\n        this.fastify.log.error({\n          msg: 'Unknown message type',\n          message,\n        });\n      }\n    });\n  }\n}\n"],"mappings":"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"}