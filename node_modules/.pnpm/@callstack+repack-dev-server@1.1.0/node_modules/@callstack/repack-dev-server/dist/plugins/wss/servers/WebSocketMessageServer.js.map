{"version":3,"file":"WebSocketMessageServer.js","names":["URL","WebSocketServer","WebSocketMessageServer","PROTOCOL_VERSION","isBroadcast","message","method","id","undefined","target","isRequest","isResponse","requestId","clientId","result","error","clients","Map","nextClientId","constructor","fastify","parseMessage","data","binary","log","msg","JSON","parse","version","toString","e","getClientSocket","socket","get","Error","handleError","errorMessage","params","send","stringify","forwardRequest","forwardResponse","processServerRequest","output","forEach","peerSocket","peerId","searchParams","upgradeReq","url","entries","reduce","acc","key","value","sendBroadcast","broadcasterId","forwarded","size","warn","broadcast","onConnection","request","client","set","debug","onClose","removeAllListeners","delete","addEventListener","event"],"sources":["../../../../src/plugins/wss/servers/WebSocketMessageServer.ts"],"sourcesContent":["import type { IncomingMessage } from 'http';\nimport { URL } from 'url';\nimport type { FastifyInstance } from 'fastify';\nimport WebSocket from 'ws';\nimport { WebSocketServer } from '../WebSocketServer';\n\n/**\n * Holds {@link ReactNativeMessage} `id` data.\n */\nexport interface ReactNativeIdObject {\n  requestId: string;\n  clientId: string;\n}\n\n/**\n * Message representation used by {@link WebSocketMessageServer}.\n */\nexport interface ReactNativeMessage {\n  version?: string;\n  id?: ReactNativeIdObject;\n  method?: string;\n  target: string;\n  result?: any;\n  error?: Error;\n  params?: Record<string, any>;\n}\n\ntype WebSocketWithUpgradeReq = WebSocket & { upgradeReq?: IncomingMessage };\n\n/**\n * Class for creating a WebSocket server and sending messages between development server\n * and the React Native applications.\n *\n * Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/messageSocketServer.ts\n *\n * @category Development server\n */\nexport class WebSocketMessageServer extends WebSocketServer {\n  static readonly PROTOCOL_VERSION = 2;\n\n  /**\n   * Check if message is a broadcast request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a broadcast request and should be broadcasted\n   * with {@link sendBroadcast}.\n   */\n  static isBroadcast(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.method === 'string' &&\n      message.id === undefined &&\n      message.target === undefined\n    );\n  }\n\n  /**\n   * Check if message is a method request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a request.\n   */\n  static isRequest(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.method === 'string' && typeof message.target === 'string'\n    );\n  }\n\n  /**\n   * Check if message is a response with results of performing some request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a response.\n   */\n  static isResponse(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.id === 'object' &&\n      typeof message.id.requestId !== 'undefined' &&\n      typeof message.id.clientId === 'string' &&\n      (message.result !== undefined || message.error !== undefined)\n    );\n  }\n\n  private clients = new Map<string, WebSocketWithUpgradeReq>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketMessageServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(fastify: FastifyInstance) {\n    super(fastify, '/message');\n  }\n\n  /**\n   * Parse stringified message into a {@link ReactNativeMessage}.\n   *\n   * @param data Stringified message.\n   * @param binary Additional binary data if any.\n   * @returns Parsed message or `undefined` if parsing failed.\n   */\n  parseMessage(\n    data: string,\n    binary: any\n  ): Partial<ReactNativeMessage> | undefined {\n    if (binary) {\n      this.fastify.log.error({\n        msg: 'Failed to parse message - expected text message, got binary',\n      });\n      return undefined;\n    }\n    try {\n      const message = JSON.parse(data) as Partial<ReactNativeMessage>;\n      if (\n        message.version === WebSocketMessageServer.PROTOCOL_VERSION.toString()\n      ) {\n        return message;\n      }\n      this.fastify.log.error({\n        msg: 'Received message had wrong protocol version',\n        message,\n      });\n    } catch (e) {\n      this.fastify.log.error({\n        msg: 'Failed to parse the message as JSON',\n        data,\n      });\n    }\n    return undefined;\n  }\n\n  /**\n   * Get client's WebSocket connection for given `clientId`.\n   * Throws if no such client is connected.\n   *\n   * @param clientId Id of the client.\n   * @returns WebSocket connection.\n   */\n  getClientSocket(clientId: string) {\n    const socket = this.clients.get(clientId);\n    if (socket === undefined) {\n      throw new Error(`Could not find client with id \"${clientId}\"`);\n    }\n    return socket;\n  }\n\n  /**\n   * Process error by sending an error message to the client whose message caused the error\n   * to occur.\n   *\n   * @param clientId Id of the client whose message caused an error.\n   * @param message Original message which caused the error.\n   * @param error Concrete instance of an error that occurred.\n   */\n  handleError(\n    clientId: string,\n    message: Partial<ReactNativeMessage>,\n    error: Error\n  ) {\n    const errorMessage = {\n      id: message.id,\n      method: message.method,\n      target: message.target,\n      error: message.error === undefined ? 'undefined' : 'defined',\n      params: message.params === undefined ? 'undefined' : 'defined',\n      result: message.result === undefined ? 'undefined' : 'defined',\n    };\n\n    if (message.id === undefined) {\n      this.fastify.log.error({\n        msg: 'Handling message failed',\n        clientId,\n        error,\n        errorMessage,\n      });\n    } else {\n      try {\n        const socket = this.getClientSocket(clientId);\n        socket.send(\n          JSON.stringify({\n            version: WebSocketMessageServer.PROTOCOL_VERSION,\n            error,\n            id: message.id,\n          })\n        );\n      } catch (error) {\n        this.fastify.log.error('Failed to reply', {\n          clientId,\n          error,\n          errorMessage,\n        });\n      }\n    }\n  }\n\n  /**\n   * Send given request `message` to it's designated client's socket based on `message.target`.\n   * The target client must be connected, otherwise it will throw an error.\n   *\n   * @param clientId Id of the client that requested the forward.\n   * @param message Message to forward.\n   */\n  forwardRequest(clientId: string, message: Partial<ReactNativeMessage>) {\n    if (!message.target) {\n      this.fastify.log.error({\n        msg: 'Failed to forward request - message.target is missing',\n        clientId,\n        message,\n      });\n      return;\n    }\n\n    const socket = this.getClientSocket(message.target);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        method: message.method,\n        params: message.params,\n        id:\n          message.id === undefined\n            ? undefined\n            : { requestId: message.id, clientId },\n      })\n    );\n  }\n\n  /**\n   * Send given response `message` to it's designated client's socket based\n   * on `message.id.clientId`.\n   * The target client must be connected, otherwise it will throw an error.\n   *\n   * @param message Message to forward.\n   */\n  forwardResponse(message: Partial<ReactNativeMessage>) {\n    if (!message.id) {\n      return;\n    }\n\n    const socket = this.getClientSocket(message.id.clientId);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        result: message.result,\n        error: message.error,\n        id: message.id.requestId,\n      })\n    );\n  }\n\n  /**\n   * Process request message targeted towards this {@link WebSocketMessageServer}\n   * and send back the results.\n   *\n   * @param clientId Id of the client who send the message.\n   * @param message The message to process by the server.\n   */\n  processServerRequest(clientId: string, message: Partial<ReactNativeMessage>) {\n    let result: string | Record<string, Record<string, string>>;\n\n    switch (message.method) {\n      case 'getid':\n        result = clientId;\n        break;\n      case 'getpeers': {\n        const output: Record<string, Record<string, string>> = {};\n        this.clients.forEach((peerSocket, peerId) => {\n          if (clientId !== peerId) {\n            const { searchParams } = new URL(peerSocket.upgradeReq?.url || '');\n            output[peerId] = [...searchParams.entries()].reduce(\n              (acc, [key, value]) => ({\n                ...acc,\n                [key]: value,\n              }),\n              {}\n            );\n          }\n        });\n        result = output;\n        break;\n      }\n      default:\n        throw new Error(\n          `Cannot process server request - unknown method ${JSON.stringify({\n            clientId,\n            message,\n          })}`\n        );\n    }\n\n    const socket = this.getClientSocket(clientId);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        result,\n        id: message.id,\n      })\n    );\n  }\n\n  /**\n   * Broadcast given message to all connected clients.\n   *\n   * @param broadcasterId Id of the client who is broadcasting.\n   * @param message Message to broadcast.\n   */\n  sendBroadcast(\n    broadcasterId: string | undefined,\n    message: Partial<ReactNativeMessage>\n  ) {\n    const forwarded = {\n      version: WebSocketMessageServer.PROTOCOL_VERSION,\n      method: message.method,\n      params: message.params,\n    };\n\n    if (this.clients.size === 0) {\n      this.fastify.log.warn({\n        msg:\n          'No apps connected. ' +\n          `Sending \"${message.method}\" to all React Native apps failed. ` +\n          'Make sure your app is running in the simulator or on a phone connected via USB.',\n      });\n    }\n\n    for (const [clientId, socket] of this.clients) {\n      if (clientId !== broadcasterId) {\n        try {\n          socket.send(JSON.stringify(forwarded));\n        } catch (error) {\n          this.fastify.log.error({\n            msg: 'Failed to send broadcast',\n            clientId,\n            error,\n            forwarded,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Send method broadcast to all connected clients.\n   *\n   * @param method Method name to broadcast.\n   * @param params Method parameters.\n   */\n  broadcast(method: string, params?: Record<string, any>) {\n    this.sendBroadcast(undefined, { method, params });\n  }\n\n  /**\n   * Process new client's WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  onConnection(socket: WebSocket, request: IncomingMessage) {\n    const clientId = `client#${this.nextClientId++}`;\n    let client: WebSocketWithUpgradeReq = socket;\n    client.upgradeReq = request;\n    this.clients.set(clientId, client);\n    this.fastify.log.debug({ msg: 'Message client connected', clientId });\n\n    const onClose = () => {\n      this.fastify.log.debug({ msg: 'Message client disconnected', clientId });\n      socket.removeAllListeners();\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('message', (event) => {\n      const message = this.parseMessage(\n        event.data.toString(),\n        // @ts-ignore\n        event.binary\n      );\n\n      if (!message) {\n        this.fastify.log.error({\n          msg: 'Received message not matching protocol',\n          clientId,\n          message,\n        });\n        return;\n      }\n\n      try {\n        if (WebSocketMessageServer.isBroadcast(message)) {\n          this.sendBroadcast(clientId, message);\n        } else if (WebSocketMessageServer.isRequest(message)) {\n          if (message.target === 'server') {\n            this.processServerRequest(clientId, message);\n          } else {\n            this.forwardRequest(clientId, message);\n          }\n        } else if (WebSocketMessageServer.isResponse(message)) {\n          this.forwardResponse(message);\n        } else {\n          throw new Error(\n            `Invalid message, did not match the protocol ${JSON.stringify({\n              clientId,\n              message,\n            })}`\n          );\n        }\n      } catch (error) {\n        this.handleError(clientId, message, error as Error);\n      }\n    });\n  }\n}\n"],"mappings":"AACA,SAASA,GAAT,QAAoB,KAApB;SAGSC,e;AAET;AACA;AACA;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAN,SAAqCD,eAArC,CAAqD;EAC1B,OAAhBE,gBAAgB,GAAG,CAAH;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;;EACoB,OAAXC,WAAW,CAACC,OAAD,EAAuC;IACvD,OACE,OAAOA,OAAO,CAACC,MAAf,KAA0B,QAA1B,IACAD,OAAO,CAACE,EAAR,KAAeC,SADf,IAEAH,OAAO,CAACI,MAAR,KAAmBD,SAHrB;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACkB,OAATE,SAAS,CAACL,OAAD,EAAuC;IACrD,OACE,OAAOA,OAAO,CAACC,MAAf,KAA0B,QAA1B,IAAsC,OAAOD,OAAO,CAACI,MAAf,KAA0B,QADlE;EAGD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACmB,OAAVE,UAAU,CAACN,OAAD,EAAuC;IACtD,OACE,OAAOA,OAAO,CAACE,EAAf,KAAsB,QAAtB,IACA,OAAOF,OAAO,CAACE,EAAR,CAAWK,SAAlB,KAAgC,WADhC,IAEA,OAAOP,OAAO,CAACE,EAAR,CAAWM,QAAlB,KAA+B,QAF/B,KAGCR,OAAO,CAACS,MAAR,KAAmBN,SAAnB,IAAgCH,OAAO,CAACU,KAAR,KAAkBP,SAHnD,CADF;EAMD;;EAEOQ,OAAO,GAAG,IAAIC,GAAJ,EAAH;EACPC,YAAY,GAAG,CAAH;EAEpB;AACF;AACA;AACA;AACA;AACA;;EACEC,WAAW,CAACC,OAAD,EAA2B;IACpC,MAAMA,OAAN,EAAe,UAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,YAAY,CACVC,IADU,EAEVC,MAFU,EAG+B;IACzC,IAAIA,MAAJ,EAAY;MACV,KAAKH,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB;QACrBU,GAAG,EAAE;MADgB,CAAvB;MAGA,OAAOjB,SAAP;IACD;;IACD,IAAI;MACF,MAAMH,OAAO,GAAGqB,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAhB;;MACA,IACEjB,OAAO,CAACuB,OAAR,KAAoB1B,sBAAsB,CAACC,gBAAvB,CAAwC0B,QAAxC,EADtB,EAEE;QACA,OAAOxB,OAAP;MACD;;MACD,KAAKe,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB;QACrBU,GAAG,EAAE,6CADgB;QAErBpB;MAFqB,CAAvB;IAID,CAXD,CAWE,OAAOyB,CAAP,EAAU;MACV,KAAKV,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB;QACrBU,GAAG,EAAE,qCADgB;QAErBH;MAFqB,CAAvB;IAID;;IACD,OAAOd,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEuB,eAAe,CAAClB,QAAD,EAAmB;IAChC,MAAMmB,MAAM,GAAG,KAAKhB,OAAL,CAAaiB,GAAb,CAAiBpB,QAAjB,CAAf;;IACA,IAAImB,MAAM,KAAKxB,SAAf,EAA0B;MACxB,MAAM,IAAI0B,KAAJ,CAAW,kCAAiCrB,QAAS,GAArD,CAAN;IACD;;IACD,OAAOmB,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEG,WAAW,CACTtB,QADS,EAETR,OAFS,EAGTU,KAHS,EAIT;IACA,MAAMqB,YAAY,GAAG;MACnB7B,EAAE,EAAEF,OAAO,CAACE,EADO;MAEnBD,MAAM,EAAED,OAAO,CAACC,MAFG;MAGnBG,MAAM,EAAEJ,OAAO,CAACI,MAHG;MAInBM,KAAK,EAAEV,OAAO,CAACU,KAAR,KAAkBP,SAAlB,GAA8B,WAA9B,GAA4C,SAJhC;MAKnB6B,MAAM,EAAEhC,OAAO,CAACgC,MAAR,KAAmB7B,SAAnB,GAA+B,WAA/B,GAA6C,SALlC;MAMnBM,MAAM,EAAET,OAAO,CAACS,MAAR,KAAmBN,SAAnB,GAA+B,WAA/B,GAA6C;IANlC,CAArB;;IASA,IAAIH,OAAO,CAACE,EAAR,KAAeC,SAAnB,EAA8B;MAC5B,KAAKY,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB;QACrBU,GAAG,EAAE,yBADgB;QAErBZ,QAFqB;QAGrBE,KAHqB;QAIrBqB;MAJqB,CAAvB;IAMD,CAPD,MAOO;MACL,IAAI;QACF,MAAMJ,MAAM,GAAG,KAAKD,eAAL,CAAqBlB,QAArB,CAAf;QACAmB,MAAM,CAACM,IAAP,CACEZ,IAAI,CAACa,SAAL,CAAe;UACbX,OAAO,EAAE1B,sBAAsB,CAACC,gBADnB;UAEbY,KAFa;UAGbR,EAAE,EAAEF,OAAO,CAACE;QAHC,CAAf,CADF;MAOD,CATD,CASE,OAAOQ,KAAP,EAAc;QACd,KAAKK,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB,iBAAvB,EAA0C;UACxCF,QADwC;UAExCE,KAFwC;UAGxCqB;QAHwC,CAA1C;MAKD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEI,cAAc,CAAC3B,QAAD,EAAmBR,OAAnB,EAAyD;IACrE,IAAI,CAACA,OAAO,CAACI,MAAb,EAAqB;MACnB,KAAKW,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB;QACrBU,GAAG,EAAE,uDADgB;QAErBZ,QAFqB;QAGrBR;MAHqB,CAAvB;MAKA;IACD;;IAED,MAAM2B,MAAM,GAAG,KAAKD,eAAL,CAAqB1B,OAAO,CAACI,MAA7B,CAAf;IACAuB,MAAM,CAACM,IAAP,CACEZ,IAAI,CAACa,SAAL,CAAe;MACbX,OAAO,EAAE1B,sBAAsB,CAACC,gBADnB;MAEbG,MAAM,EAAED,OAAO,CAACC,MAFH;MAGb+B,MAAM,EAAEhC,OAAO,CAACgC,MAHH;MAIb9B,EAAE,EACAF,OAAO,CAACE,EAAR,KAAeC,SAAf,GACIA,SADJ,GAEI;QAAEI,SAAS,EAAEP,OAAO,CAACE,EAArB;QAAyBM;MAAzB;IAPO,CAAf,CADF;EAWD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE4B,eAAe,CAACpC,OAAD,EAAuC;IACpD,IAAI,CAACA,OAAO,CAACE,EAAb,EAAiB;MACf;IACD;;IAED,MAAMyB,MAAM,GAAG,KAAKD,eAAL,CAAqB1B,OAAO,CAACE,EAAR,CAAWM,QAAhC,CAAf;IACAmB,MAAM,CAACM,IAAP,CACEZ,IAAI,CAACa,SAAL,CAAe;MACbX,OAAO,EAAE1B,sBAAsB,CAACC,gBADnB;MAEbW,MAAM,EAAET,OAAO,CAACS,MAFH;MAGbC,KAAK,EAAEV,OAAO,CAACU,KAHF;MAIbR,EAAE,EAAEF,OAAO,CAACE,EAAR,CAAWK;IAJF,CAAf,CADF;EAQD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE8B,oBAAoB,CAAC7B,QAAD,EAAmBR,OAAnB,EAAyD;IAC3E,IAAIS,MAAJ;;IAEA,QAAQT,OAAO,CAACC,MAAhB;MACE,KAAK,OAAL;QACEQ,MAAM,GAAGD,QAAT;QACA;;MACF,KAAK,UAAL;QAAiB;UACf,MAAM8B,MAA8C,GAAG,EAAvD;UACA,KAAK3B,OAAL,CAAa4B,OAAb,CAAqB,CAACC,UAAD,EAAaC,MAAb,KAAwB;YAC3C,IAAIjC,QAAQ,KAAKiC,MAAjB,EAAyB;cAAA;;cACvB,MAAM;gBAAEC;cAAF,IAAmB,IAAI/C,GAAJ,CAAQ,0BAAA6C,UAAU,CAACG,UAAX,gFAAuBC,GAAvB,KAA8B,EAAtC,CAAzB;cACAN,MAAM,CAACG,MAAD,CAAN,GAAiB,CAAC,GAAGC,YAAY,CAACG,OAAb,EAAJ,EAA4BC,MAA5B,CACf,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,MAAwB,EACtB,GAAGF,GADmB;gBAEtB,CAACC,GAAD,GAAOC;cAFe,CAAxB,CADe,EAKf,EALe,CAAjB;YAOD;UACF,CAXD;UAYAxC,MAAM,GAAG6B,MAAT;UACA;QACD;;MACD;QACE,MAAM,IAAIT,KAAJ,CACH,kDAAiDR,IAAI,CAACa,SAAL,CAAe;UAC/D1B,QAD+D;UAE/DR;QAF+D,CAAf,CAG/C,EAJC,CAAN;IAtBJ;;IA8BA,MAAM2B,MAAM,GAAG,KAAKD,eAAL,CAAqBlB,QAArB,CAAf;IACAmB,MAAM,CAACM,IAAP,CACEZ,IAAI,CAACa,SAAL,CAAe;MACbX,OAAO,EAAE1B,sBAAsB,CAACC,gBADnB;MAEbW,MAFa;MAGbP,EAAE,EAAEF,OAAO,CAACE;IAHC,CAAf,CADF;EAOD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEgD,aAAa,CACXC,aADW,EAEXnD,OAFW,EAGX;IACA,MAAMoD,SAAS,GAAG;MAChB7B,OAAO,EAAE1B,sBAAsB,CAACC,gBADhB;MAEhBG,MAAM,EAAED,OAAO,CAACC,MAFA;MAGhB+B,MAAM,EAAEhC,OAAO,CAACgC;IAHA,CAAlB;;IAMA,IAAI,KAAKrB,OAAL,CAAa0C,IAAb,KAAsB,CAA1B,EAA6B;MAC3B,KAAKtC,OAAL,CAAaI,GAAb,CAAiBmC,IAAjB,CAAsB;QACpBlC,GAAG,EACD,wBACC,YAAWpB,OAAO,CAACC,MAAO,qCAD3B,GAEA;MAJkB,CAAtB;IAMD;;IAED,KAAK,MAAM,CAACO,QAAD,EAAWmB,MAAX,CAAX,IAAiC,KAAKhB,OAAtC,EAA+C;MAC7C,IAAIH,QAAQ,KAAK2C,aAAjB,EAAgC;QAC9B,IAAI;UACFxB,MAAM,CAACM,IAAP,CAAYZ,IAAI,CAACa,SAAL,CAAekB,SAAf,CAAZ;QACD,CAFD,CAEE,OAAO1C,KAAP,EAAc;UACd,KAAKK,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB;YACrBU,GAAG,EAAE,0BADgB;YAErBZ,QAFqB;YAGrBE,KAHqB;YAIrB0C;UAJqB,CAAvB;QAMD;MACF;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEG,SAAS,CAACtD,MAAD,EAAiB+B,MAAjB,EAA+C;IACtD,KAAKkB,aAAL,CAAmB/C,SAAnB,EAA8B;MAAEF,MAAF;MAAU+B;IAAV,CAA9B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEwB,YAAY,CAAC7B,MAAD,EAAoB8B,OAApB,EAA8C;IACxD,MAAMjD,QAAQ,GAAI,UAAS,KAAKK,YAAL,EAAoB,EAA/C;IACA,IAAI6C,MAA+B,GAAG/B,MAAtC;IACA+B,MAAM,CAACf,UAAP,GAAoBc,OAApB;IACA,KAAK9C,OAAL,CAAagD,GAAb,CAAiBnD,QAAjB,EAA2BkD,MAA3B;IACA,KAAK3C,OAAL,CAAaI,GAAb,CAAiByC,KAAjB,CAAuB;MAAExC,GAAG,EAAE,0BAAP;MAAmCZ;IAAnC,CAAvB;;IAEA,MAAMqD,OAAO,GAAG,MAAM;MACpB,KAAK9C,OAAL,CAAaI,GAAb,CAAiByC,KAAjB,CAAuB;QAAExC,GAAG,EAAE,6BAAP;QAAsCZ;MAAtC,CAAvB;MACAmB,MAAM,CAACmC,kBAAP;MACA,KAAKnD,OAAL,CAAaoD,MAAb,CAAoBvD,QAApB;IACD,CAJD;;IAMAmB,MAAM,CAACqC,gBAAP,CAAwB,OAAxB,EAAiCH,OAAjC;IACAlC,MAAM,CAACqC,gBAAP,CAAwB,OAAxB,EAAiCH,OAAjC;IACAlC,MAAM,CAACqC,gBAAP,CAAwB,SAAxB,EAAoCC,KAAD,IAAW;MAC5C,MAAMjE,OAAO,GAAG,KAAKgB,YAAL,CACdiD,KAAK,CAAChD,IAAN,CAAWO,QAAX,EADc,EAEd;MACAyC,KAAK,CAAC/C,MAHQ,CAAhB;;MAMA,IAAI,CAAClB,OAAL,EAAc;QACZ,KAAKe,OAAL,CAAaI,GAAb,CAAiBT,KAAjB,CAAuB;UACrBU,GAAG,EAAE,wCADgB;UAErBZ,QAFqB;UAGrBR;QAHqB,CAAvB;QAKA;MACD;;MAED,IAAI;QACF,IAAIH,sBAAsB,CAACE,WAAvB,CAAmCC,OAAnC,CAAJ,EAAiD;UAC/C,KAAKkD,aAAL,CAAmB1C,QAAnB,EAA6BR,OAA7B;QACD,CAFD,MAEO,IAAIH,sBAAsB,CAACQ,SAAvB,CAAiCL,OAAjC,CAAJ,EAA+C;UACpD,IAAIA,OAAO,CAACI,MAAR,KAAmB,QAAvB,EAAiC;YAC/B,KAAKiC,oBAAL,CAA0B7B,QAA1B,EAAoCR,OAApC;UACD,CAFD,MAEO;YACL,KAAKmC,cAAL,CAAoB3B,QAApB,EAA8BR,OAA9B;UACD;QACF,CANM,MAMA,IAAIH,sBAAsB,CAACS,UAAvB,CAAkCN,OAAlC,CAAJ,EAAgD;UACrD,KAAKoC,eAAL,CAAqBpC,OAArB;QACD,CAFM,MAEA;UACL,MAAM,IAAI6B,KAAJ,CACH,+CAA8CR,IAAI,CAACa,SAAL,CAAe;YAC5D1B,QAD4D;YAE5DR;UAF4D,CAAf,CAG5C,EAJC,CAAN;QAMD;MACF,CAnBD,CAmBE,OAAOU,KAAP,EAAc;QACd,KAAKoB,WAAL,CAAiBtB,QAAjB,EAA2BR,OAA3B,EAAoCU,KAApC;MACD;IACF,CAtCD;EAuCD;;AAtXyD"}