{"version":3,"file":"Symbolicator.js","names":["URL","codeFrameColumns","SourceMapConsumer","Symbolicator","inferPlatformFromStack","stack","frame","file","searchParams","pathname","platform","get","bundleFilename","split","reverse","platformOrExtension","extension","sourceMapConsumerCache","constructor","delegate","process","logger","debug","msg","frames","startsWith","includes","push","processedFrames","fileUrl","rawSourceMap","getSourceMap","sourceMapLength","length","sourceMapConsumer","toString","processedFrame","processFrame","codeFrame","getCodeFrame","key","destroy","lineNumber","column","collapse","consumer","lookup","originalPositionFor","line","source","methodName","name","shouldIncludeFrame","undefined","content","getSource","start","forceColor","location","row","fileName","error","message"],"sources":["../../../src/plugins/symbolicate/Symbolicator.ts"],"sourcesContent":["import { URL } from 'url';\nimport { codeFrameColumns } from '@babel/code-frame';\nimport { SourceMapConsumer } from 'source-map';\nimport type { FastifyLoggerInstance } from 'fastify';\nimport type {\n  CodeFrame,\n  InputStackFrame,\n  ReactNativeStackFrame,\n  StackFrame,\n  SymbolicatorDelegate,\n  SymbolicatorResults,\n} from './types';\n\n/**\n * Class for transforming stack traces from React Native application with using Source Map.\n * Raw stack frames produced by React Native, points to some location from the bundle\n * eg `index.bundle?platform=ios:567:1234`. By using Source Map for that bundle `Symbolicator`\n * produces frames that point to source code inside your project eg `Hello.tsx:10:9`.\n */\nexport class Symbolicator {\n  /**\n   * Infer platform from stack frames.\n   * Usually at least one frame has `file` field with the bundle URL eg:\n   * `http://localhost:8081/index.bundle?platform=ios&...`, which can be used to infer platform.\n   *\n   * @param stack Array of stack frames.\n   * @returns Inferred platform or `undefined` if cannot infer.\n   */\n  static inferPlatformFromStack(stack: ReactNativeStackFrame[]) {\n    for (const frame of stack) {\n      if (!frame.file) {\n        return;\n      }\n\n      const { searchParams, pathname } = new URL(frame.file, 'file://');\n      const platform = searchParams.get('platform');\n      if (platform) {\n        return platform;\n      } else {\n        const [bundleFilename] = pathname.split('/').reverse();\n        const [, platformOrExtension, extension] = bundleFilename.split('.');\n        if (extension) {\n          return platformOrExtension;\n        }\n      }\n    }\n  }\n\n  /**\n   * Cache with initialized `SourceMapConsumer` to improve symbolication performance.\n   */\n  sourceMapConsumerCache: Record<string, SourceMapConsumer> = {};\n\n  /**\n   * Constructs new `Symbolicator` instance.\n   *\n   * @param delegate Delegate instance with symbolication functions.\n   */\n  constructor(private delegate: SymbolicatorDelegate) {}\n\n  /**\n   * Process raw React Native stack frames and transform them using Source Maps.\n   * Method will try to symbolicate as much data as possible, but if the Source Maps\n   * are not available, invalid or the original positions/data is not found in Source Maps,\n   * the method will return raw values - the same as supplied with `stack` parameter.\n   * For example out of 10 frames, it's possible that only first 7 will be symbolicated and the\n   * remaining 3 will be unchanged.\n   *\n   * @param logger Fastify logger instance.\n   * @param stack Raw stack frames.\n   * @returns Symbolicated stack frames.\n   */\n  async process(\n    logger: FastifyLoggerInstance,\n    stack: ReactNativeStackFrame[]\n  ): Promise<SymbolicatorResults> {\n    logger.debug({ msg: 'Filtering out unnecessary frames' });\n\n    const frames: InputStackFrame[] = [];\n    for (const frame of stack) {\n      const { file } = frame;\n      if (file?.startsWith('http') && !file.includes('debuggerWorker')) {\n        frames.push(frame as InputStackFrame);\n      }\n    }\n\n    try {\n      logger.debug({ msg: 'Processing frames', frames });\n\n      const processedFrames: StackFrame[] = [];\n      for (const frame of frames) {\n        if (!this.sourceMapConsumerCache[frame.file]) {\n          logger.debug({\n            msg: 'Loading raw source map data',\n            fileUrl: frame.file,\n          });\n\n          const rawSourceMap = await this.delegate.getSourceMap(frame.file);\n\n          logger.debug({\n            msg: 'Creating source map instance',\n            fileUrl: frame.file,\n            sourceMapLength: rawSourceMap.length,\n          });\n          const sourceMapConsumer = await new SourceMapConsumer(\n            rawSourceMap.toString()\n          );\n\n          logger.debug({\n            msg: 'Saving source map instance into cache',\n            fileUrl: frame.file,\n          });\n          this.sourceMapConsumerCache[frame.file] = sourceMapConsumer;\n        }\n\n        logger.debug({\n          msg: 'Symbolicating frame',\n          frame,\n        });\n        const processedFrame = this.processFrame(frame);\n\n        logger.debug({\n          msg: 'Finished symbolicating frame',\n          frame,\n        });\n        processedFrames.push(processedFrame);\n      }\n\n      const codeFrame =\n        (await this.getCodeFrame(logger, processedFrames)) ?? null;\n\n      logger.debug({\n        msg: 'Finished symbolicating frames',\n        processedFrames,\n        codeFrame,\n      });\n\n      return {\n        stack: processedFrames,\n        codeFrame,\n      };\n    } finally {\n      for (const key in this.sourceMapConsumerCache) {\n        this.sourceMapConsumerCache[key].destroy();\n        delete this.sourceMapConsumerCache[key];\n      }\n    }\n  }\n\n  private processFrame(frame: InputStackFrame): StackFrame {\n    if (!frame.lineNumber || !frame.column) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const consumer = this.sourceMapConsumerCache[frame.file];\n    if (!consumer) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const lookup = consumer.originalPositionFor({\n      line: frame.lineNumber,\n      column: frame.column,\n    });\n\n    // If lookup fails, we get the same shape object, but with\n    // all values set to null\n    if (!lookup.source) {\n      // It is better to gracefully return the original frame\n      // than to throw an exception\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    return {\n      lineNumber: lookup.line || frame.lineNumber,\n      column: lookup.column || frame.column,\n      file: lookup.source,\n      methodName: lookup.name || frame.methodName,\n      collapse: false,\n    };\n  }\n\n  private async getCodeFrame(\n    logger: FastifyLoggerInstance,\n    processedFrames: StackFrame[]\n  ): Promise<CodeFrame | undefined> {\n    for (const frame of processedFrames) {\n      if (frame.collapse || !frame.lineNumber || !frame.column) {\n        continue;\n      }\n\n      if (!this.delegate.shouldIncludeFrame(frame)) {\n        return undefined;\n      }\n\n      logger.debug({\n        msg: 'Generating code frame',\n        frame,\n      });\n\n      try {\n        return {\n          content: codeFrameColumns(\n            (await this.delegate.getSource(frame.file)).toString(),\n            {\n              start: { column: frame.column, line: frame.lineNumber },\n            },\n            { forceColor: true }\n          ),\n          location: {\n            row: frame.lineNumber,\n            column: frame.column,\n          },\n          fileName: frame.file,\n        };\n      } catch (error) {\n        logger.error({\n          msg: 'Failed to create code frame',\n          error: (error as Error).message,\n        });\n      }\n\n      return undefined;\n    }\n  }\n}\n"],"mappings":"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"}