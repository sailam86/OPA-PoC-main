{"version":3,"file":"WebSocketApiServer.js","names":["WebSocketServer","WebSocketApiServer","clients","Map","nextClientId","constructor","fastify","send","event","data","JSON","stringify","socket","entries","onConnection","clientId","set","log","info","msg","onClose","delete","addEventListener"],"sources":["../../../../src/plugins/wss/servers/WebSocketApiServer.ts"],"sourcesContent":["import { FastifyInstance } from 'fastify';\nimport WebSocket from 'ws';\nimport { WebSocketServer } from '../WebSocketServer';\n\n/**\n * Class for creating a WebSocket server for API clients.\n * Useful to listening for compilation events and new logs.\n *\n * @category Development server\n */\nexport class WebSocketApiServer extends WebSocketServer {\n  private clients = new Map<string, WebSocket>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketApiServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(fastify: FastifyInstance) {\n    super(fastify, '/api');\n  }\n\n  /**\n   * Send message to all connected API clients.\n   *\n   * @param event Event string or object to send.\n   */\n  send(event: any) {\n    const data = typeof event === 'string' ? event : JSON.stringify(event);\n\n    for (const [, socket] of this.clients.entries()) {\n      try {\n        socket.send(data);\n      } catch {\n        // NOOP\n      }\n    }\n  }\n\n  /**\n   * Process new WebSocket connection from client application.\n   *\n   * @param socket Incoming client's WebSocket connection.\n   */\n  onConnection(socket: WebSocket) {\n    const clientId = `client#${this.nextClientId++}`;\n    this.clients.set(clientId, socket);\n\n    this.fastify.log.info({ msg: 'API client connected', clientId });\n    this.clients.set(clientId, socket);\n\n    const onClose = () => {\n      this.fastify.log.info({\n        msg: 'API client disconnected',\n        clientId,\n      });\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n  }\n}\n"],"mappings":"SAESA,e;AAET;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAN,SAAiCD,eAAjC,CAAiD;EAC9CE,OAAO,GAAG,IAAIC,GAAJ,EAAH;EACPC,YAAY,GAAG,CAAH;EAEpB;AACF;AACA;AACA;AACA;AACA;;EACEC,WAAW,CAACC,OAAD,EAA2B;IACpC,MAAMA,OAAN,EAAe,MAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,IAAI,CAACC,KAAD,EAAa;IACf,MAAMC,IAAI,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCE,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAjD;;IAEA,KAAK,MAAM,GAAGI,MAAH,CAAX,IAAyB,KAAKV,OAAL,CAAaW,OAAb,EAAzB,EAAiD;MAC/C,IAAI;QACFD,MAAM,CAACL,IAAP,CAAYE,IAAZ;MACD,CAFD,CAEE,MAAM,CACN;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEK,YAAY,CAACF,MAAD,EAAoB;IAC9B,MAAMG,QAAQ,GAAI,UAAS,KAAKX,YAAL,EAAoB,EAA/C;IACA,KAAKF,OAAL,CAAac,GAAb,CAAiBD,QAAjB,EAA2BH,MAA3B;IAEA,KAAKN,OAAL,CAAaW,GAAb,CAAiBC,IAAjB,CAAsB;MAAEC,GAAG,EAAE,sBAAP;MAA+BJ;IAA/B,CAAtB;IACA,KAAKb,OAAL,CAAac,GAAb,CAAiBD,QAAjB,EAA2BH,MAA3B;;IAEA,MAAMQ,OAAO,GAAG,MAAM;MACpB,KAAKd,OAAL,CAAaW,GAAb,CAAiBC,IAAjB,CAAsB;QACpBC,GAAG,EAAE,yBADe;QAEpBJ;MAFoB,CAAtB;MAIA,KAAKb,OAAL,CAAamB,MAAb,CAAoBN,QAApB;IACD,CAND;;IAQAH,MAAM,CAACU,gBAAP,CAAwB,OAAxB,EAAiCF,OAAjC;IACAR,MAAM,CAACU,gBAAP,CAAwB,OAAxB,EAAiCF,OAAjC;EACD;;AArDqD"}