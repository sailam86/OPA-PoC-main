{"version":3,"file":"static/js/debuggerWorker.16cda763.worker.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAfA;AAkBA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@callstack/repack-debugger-app/webpack/bootstrap","webpack://@callstack/repack-debugger-app/webpack/runtime/make namespace object","webpack://@callstack/repack-debugger-app/./src/debuggerWorker.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/* global __fbBatchedBridge, importScripts */\n/* eslint no-unused-vars: 0 */\n/* eslint no-restricted-globals: 0 */\n\nonmessage = (function () {\n  var visibilityState;\n  var showVisibilityWarning = (function () {\n    var hasWarned = false;\n    return function () {\n      // Wait until `YellowBox` gets initialized before displaying the warning.\n      if (hasWarned || console.warn.toString().includes('[native code]')) {\n        return;\n      }\n      hasWarned = true;\n      console.warn(\n        'Remote debugger is in a background tab which may cause apps to ' +\n          'perform slowly. Fix this by foregrounding the tab (or opening it in ' +\n          'a separate window).'\n      );\n    };\n  })();\n\n  var messageHandlers = {\n    executeApplicationScript: function (message, sendReply) {\n      for (var key in message.inject) {\n        self[key] = JSON.parse(message.inject[key]);\n      }\n      var error;\n      try {\n        importScripts(message.url);\n      } catch (err) {\n        error = err.message;\n      }\n      sendReply(null /* result */, error);\n    },\n    setDebuggerVisibility: function (message) {\n      visibilityState = message.visibilityState;\n    },\n  };\n\n  return function (message) {\n    if (visibilityState === 'hidden') {\n      showVisibilityWarning();\n    }\n\n    var object = message.data;\n\n    var sendReply = function (result, error) {\n      postMessage({ replyID: object.id, result: result, error: error });\n    };\n\n    var handler = messageHandlers[object.method];\n    if (handler) {\n      // Special cased handlers\n      handler(object, sendReply);\n    } else {\n      // Other methods get called on the bridge\n      var returnValue = [[], [], [], 0];\n      var error;\n      try {\n        if (typeof __fbBatchedBridge === 'object') {\n          returnValue = __fbBatchedBridge[object.method].apply(\n            null,\n            object.arguments\n          );\n        } else {\n          error = 'Failed to call function, __fbBatchedBridge is undefined';\n        }\n      } catch (err) {\n        error = err.message;\n      } finally {\n        sendReply(JSON.stringify(returnValue), error);\n      }\n    }\n  };\n})();\n"],"names":[],"sourceRoot":""}